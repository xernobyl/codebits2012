#include "Resources.h"
#include "GLWindow.h"
#include "Model.h"
#include "Font.h"
#include <iostream>

#define STBI_NO_HDR
#define STBI_NO_STDIO
#include "stb_image.h"

unsigned Resources::texture[N_TEXTURES];
Model Resources::model[N_MODELS];
Font Resources::font[N_FONTS];


enum
{
	F_ETC = 0x01,		// vs PNG
	F_NEAREST = 0x02,	// vs LINEAR
	F_MIPMAPS = 0x04,	// generate or load mipmaps
	F_CLAMP = 0x08,		// vs REPEAT
	F_4 = 0x10,
	F_5 = 0x20,
	F_6 = 0x40,
	F_7 = 0x80
};


static const char *texturesfilepath[N_TEXTURES] =
{
	"2d/puf.etc",
	"2d/futura.png",
	"2d/anonymouspro.png",
	"2d/sapos0.etc",
};


static const char textureflags[N_TEXTURES] =
{
	F_CLAMP | F_ETC,
	F_CLAMP,
	F_CLAMP,
	F_ETC | F_MIPMAPS,
};


static const char *modelsfilepath[N_MODELS] =
{
	"3d/cube.3d",
};


static bool InitTextures()
{	
	glGenTextures(N_TEXTURES, Resources::texture);
	
	for(unsigned int i = 0; i < N_TEXTURES; ++i)
	{
		int width, height;

		glBindTexture(GL_TEXTURE_2D, Resources::texture[i]);
		
		if(textureflags[i] & F_MIPMAPS)
		{
			if(textureflags[i] & F_ETC)
			{
				for(unsigned j = 0; j < 10; ++j)
				{
					char tmp[256];
					strcpy(tmp, texturesfilepath[i]);

					tmp[strlen(tmp) - 5] = '0' + j;

					unsigned filelen;
					char *filebuffer = GLWindow::LoadFile(tmp, (unsigned*)&filelen);

					if(!filebuffer || (filelen == 0))
						break;

					if(j == 0)
						width = height = sqrt(filelen * 2);
					else
					{
						width /= 2;
						height /= 2;
					}

					glCompressedTexImage2D(GL_TEXTURE_2D, j, GL_ETC1_RGB8_OES, width, height, 0, filelen, filebuffer);
					delete [] filebuffer;
				}
			}
			else
			{
				// load a few PNGs
			}

			if(textureflags[i] & F_NEAREST)
				glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_NEAREST);
			else
				glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
		}
		else
		{
			unsigned filelen;
			char *filebuffer = GLWindow::LoadFile(texturesfilepath[i], (unsigned*)&filelen);

			if(!filebuffer)
			{
				std::cout << "Could not load " << texturesfilepath[i] << std::endl;
				return false;
			}

			if(textureflags[i] & F_ETC)
			{
				width = height = sqrt(filelen * 2);
				glCompressedTexImage2D(GL_TEXTURE_2D, 0, GL_ETC1_RGB8_OES, width, height, 0, filelen, filebuffer);
			}
			else
			{
				int ncomponents;

				stbi_uc *img = stbi_load_from_memory((const stbi_uc*)filebuffer, filelen, &width, &height, &ncomponents, 0);
				if(!img)
				{
					delete [] filebuffer;
					return false;
				}
				
				switch(ncomponents)
				{
				case 1:
					ncomponents = GL_LUMINANCE;
					break;
				case 2:
					ncomponents = GL_LUMINANCE_ALPHA;
					break;
				case 3:
					ncomponents = GL_RGB;
					break;
				default:	// 4
					ncomponents = GL_RGBA;
				}

				glTexImage2D(GL_TEXTURE_2D, 0, ncomponents, width, height, 0, ncomponents, GL_UNSIGNED_BYTE, img);

				stbi_image_free(img);
			}

			delete [] filebuffer;

			if(textureflags[i] & F_NEAREST)
				glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
			else
				glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		}
		
		if(textureflags[i] & F_NEAREST)
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
		else
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

		if(textureflags[i] & F_CLAMP)
		{
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
			glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
		}
	}

	return true;
}


static bool InitModels()
{
	for(unsigned i = 0; i < N_MODELS; ++i)
		if(!Resources::model[i].Load(modelsfilepath[i]))
		{
			printf("Error loading %s", modelsfilepath[i]);
			return false;
		}

	return true;
}


static bool InitFonts()
{
	static const int futurainfo[754] =
	{
		36,		// FONT SIZE IN PIXELS
		9000,	// SPACE ADVANCE
		33,247,96,9,32,1562,28687,11250,
		34,56,130,12,14,500,27875,12312,
		35,156,159,28,29,375,27562,28125,
		36,100,127,21,35,1062,30000,22187,
		37,68,96,32,31,-625,28187,29750,
		38,129,128,27,31,125,28062,25312,
		39,61,227,6,14,937,27625,7687,
		40,117,205,11,44,-125,33000,9000,
		41,0,121,11,44,-1000,33000,8937,
		42,11,192,16,17,625,28187,16875,
		43,163,64,25,26,3062,24000,30687,
		44,56,144,11,13,-187,6437,10562,
		45,117,249,11,7,1250,12687,13437,
		46,56,187,9,9,1187,6062,10562,
		47,36,96,20,34,-2375,28687,15062,
		48,225,96,22,32,375,28687,22187,
		49,235,32,17,30,2812,27687,22187,
		50,233,128,23,31,-812,28687,22187,
		51,68,213,22,31,-62,27937,22187,
		52,180,96,23,31,-937,29062,22187,
		53,188,64,21,30,437,27687,22187,
		54,142,64,21,31,687,27875,22187,
		55,68,160,23,30,562,27625,22187,
		56,121,64,21,31,750,28625,22125,
		57,100,64,21,31,750,28687,22187,
		58,56,164,9,23,1375,20312,11000,
		59,89,127,11,27,-250,20312,11062,
		60,69,32,25,24,2937,22562,30687,
		61,11,155,25,14,3125,18125,30687,
		62,36,227,25,24,2937,22562,30687,
		63,201,32,17,31,1000,28687,18437,
		64,0,0,36,37,0,28375,35937,
		65,100,96,29,31,-2187,29125,24375,
		66,209,64,21,30,1562,27937,22187,
		67,231,224,25,31,250,28687,25000,
		68,183,128,25,30,1562,27875,26437,
		69,183,32,18,30,1562,27875,19937,
		70,74,0,17,30,1562,27875,17187,
		71,156,128,27,31,250,28687,28062,
		72,208,128,25,30,1562,27875,27312,
		73,57,197,8,30,1687,27875,10625,
		74,242,159,13,31,-1500,27937,12500,
		75,156,96,24,30,1562,27875,22937,
		76,218,32,17,30,1687,27875,16562,
		77,36,32,33,32,-562,29062,31500,
		78,129,96,27,32,1562,29062,29250,
		79,36,64,32,32,250,28687,31562,
		80,118,32,19,30,1687,27875,20875,
		81,68,64,32,32,312,28625,32250,
		82,230,64,21,30,1562,27875,20437,
		83,203,96,22,32,-187,28687,20750,
		84,36,197,21,30,-1312,27875,18312,
		85,208,224,23,31,1375,27875,25437,
		86,184,159,26,31,-1625,27875,22562,
		87,36,0,38,32,-1437,28875,34500,
		88,129,223,25,30,-1500,27875,21312,
		89,129,193,25,30,-1875,27875,20437,
		90,184,223,24,30,-1437,27875,20625,
		91,0,37,13,42,1250,31437,13500,
		92,36,130,20,34,-2375,28687,15062,
		93,0,79,13,42,187,31437,13500,
		94,68,244,20,12,-687,28500,18000,
		95,210,183,22,7,-1687,-3750,18062,
		96,213,23,13,9,-1875,28437,9000,
		97,137,32,23,24,125,20812,24000,
		98,156,188,23,34,1500,31250,24000,
		99,175,0,19,23,125,20812,18812,
		100,156,222,23,34,125,31250,24062,
		101,160,32,23,24,125,20812,22937,
		102,11,121,14,34,-1062,31812,10500,
		103,129,159,23,34,125,20812,24062,
		104,36,164,20,33,1500,31250,22500,
		105,91,160,9,30,1000,28437,10000,
		106,117,162,9,41,1000,28437,10000,
		107,68,127,21,33,1500,31250,19812,
		108,121,127,8,33,1562,31250,10125,
		109,68,190,30,23,1500,20812,31937,
		110,135,0,20,23,1500,20812,22250,
		111,94,32,24,24,125,20812,23687,
		112,231,190,23,34,1500,20812,24000,
		113,208,190,23,34,125,20812,24000,
		114,11,169,14,23,1562,20687,14375,
		115,213,0,18,23,-62,20750,17375,
		116,231,0,14,28,-812,26250,10312,
		117,194,0,19,23,1375,20125,21687,
		118,91,0,22,23,-1750,20125,18125,
		119,210,159,32,24,-1625,20875,27812,
		120,113,0,22,22,-1500,20125,18750,
		121,184,190,24,33,-1437,20125,20187,
		122,155,0,20,22,-1312,20125,17687,
		123,100,162,17,43,625,31437,18000,
		124,90,213,7,40,5750,29500,18000,
		125,100,205,17,43,937,31437,18000,
		126,11,209,23,9,1062,17750,25062
	};


	static const int anonymousproinfo[754] =
	{
		44,		// FONT SIZE IN PIXELS
		24000,	// SPACE ADVANCE
		33,242,163,8,32,6500,29500,24000,
		34,92,237,16,14,2437,29562,24000,
		35,0,88,24,24,-1500,21500,24000,
		36,25,0,23,40,-1500,33562,24000,
		37,168,130,25,33,-1937,30187,24000,
		38,143,130,25,33,-2000,30000,24000,
		39,108,233,8,14,6500,29500,24000,
		40,70,190,15,44,2562,33812,24000,
		41,70,146,15,44,3375,33812,24000,
		42,25,139,22,24,-750,21500,24000,
		43,0,40,24,24,-1500,21750,24000,
		44,241,130,12,16,3625,5500,24000,
		45,0,247,24,6,-1500,13000,24000,
		46,108,247,8,8,6500,5500,24000,
		47,48,0,22,38,-625,30625,24000,
		48,118,97,25,33,-2187,30000,24000,
		49,48,38,20,32,-1500,29562,24000,
		50,184,32,22,32,-1312,30000,24000,
		51,216,97,23,33,-1000,30000,24000,
		52,168,97,24,32,-1500,29562,24000,
		53,192,97,24,32,-1437,29500,24000,
		54,217,130,24,33,-1687,30000,24000,
		55,228,32,22,32,-437,29500,24000,
		56,193,130,24,33,-1687,30000,24000,
		57,218,195,24,33,-2000,30000,24000,
		58,243,228,8,24,6500,21500,24000,
		59,242,195,12,32,3625,21500,24000,
		60,0,160,16,26,2750,22812,24000,
		61,0,212,24,16,-1500,17750,24000,
		62,0,186,16,26,1562,22812,24000,
		63,48,102,19,32,2062,30000,24000,
		64,168,163,25,33,-2187,30000,24000,
		65,92,0,26,32,-2812,29562,24000,
		66,118,32,22,32,-437,29562,24000,
		67,168,196,24,33,-1937,30000,24000,
		68,118,203,23,32,-437,29562,24000,
		69,70,82,21,32,-437,29562,24000,
		70,224,0,21,32,-437,29562,24000,
		71,143,97,25,33,-1937,30000,24000,
		72,203,0,21,32,-437,29562,24000,
		73,25,163,16,32,2500,29562,24000,
		74,143,64,23,32,-1562,29562,24000,
		75,118,0,22,32,-437,29562,24000,
		76,182,0,21,32,-437,29562,24000,
		77,161,0,21,32,-437,29562,24000,
		78,140,0,21,32,-437,29562,24000,
		79,118,64,25,33,-2187,30000,24000,
		80,162,32,22,32,-437,29500,24000,
		81,0,0,25,40,-2187,30000,24000,
		82,166,64,23,32,-437,29500,24000,
		83,92,160,22,33,-937,30000,24000,
		84,143,163,24,32,-1500,29562,24000,
		85,70,114,21,32,-437,29562,24000,
		86,92,32,26,32,-2812,29562,24000,
		87,92,64,26,32,-2875,29562,24000,
		88,193,163,25,32,-2000,29562,24000,
		89,218,163,24,32,-1937,29562,24000,
		90,140,32,22,32,-437,29562,24000,
		91,48,202,12,44,6500,33562,24000,
		92,70,0,22,38,1312,30625,24000,
		93,48,158,12,44,2437,33562,24000,
		94,118,235,24,20,-1500,29562,24000,
		95,0,241,24,6,-1500,0,24000,
		96,241,146,14,11,3375,30812,24000,
		97,25,65,23,25,-1562,22000,24000,
		98,189,64,23,32,-437,29562,24000,
		99,25,90,23,25,-1500,22000,24000,
		100,212,64,23,32,-1562,29500,24000,
		101,143,227,24,25,-1562,22000,24000,
		102,48,70,20,32,2500,30000,24000,
		103,118,170,23,33,-1562,22000,24000,
		104,235,64,21,32,-437,29562,24000,
		105,239,97,16,32,2500,29562,24000,
		106,118,130,19,40,-1437,29500,24000,
		107,206,32,22,32,-437,29562,24000,
		108,25,195,16,32,2500,29562,24000,
		109,0,64,24,24,-1500,22000,24000,
		110,0,136,21,24,-437,22000,24000,
		111,218,228,25,25,-1937,22000,24000,
		112,92,96,23,32,-437,22000,24000,
		113,92,128,23,32,-1500,22000,24000,
		114,25,115,23,24,-1500,22000,24000,
		115,25,40,23,25,-1750,22000,24000,
		116,143,195,24,32,-1500,29562,24000,
		117,25,227,21,24,-437,21500,24000,
		118,168,229,25,24,-2187,21562,24000,
		119,193,227,25,24,-2125,21562,24000,
		120,0,112,24,24,-1937,21500,24000,
		121,193,195,25,32,-2187,21562,24000,
		122,48,134,22,24,-500,21500,24000,
		123,70,38,16,44,2437,33562,24000,
		124,108,193,7,40,7000,33562,24000,
		125,92,193,16,44,2437,33562,24000,
		126,0,228,24,13,-1500,16312,24000
	};

	Resources::font[F_FUTURA].Init(Resources::texture[TX_FUTURA], 256, futurainfo, 754);
	Resources::font[F_ANONYMOUSPRO].Init(Resources::texture[TX_ANONYMOUSPRO], 256, anonymousproinfo, 754);
	
	return true;
}


bool Resources::Init()
{
	if(!InitTextures())
		return false;
	if(!InitModels())
		return false;
	if(!InitFonts())
		return false;

	return true;
}
